;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 12/12/2014 18:57:58
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF001EF73  	GOTO        742
_interrupt:
;ModuloCentral.c,37 :: 		void interrupt() {
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C001  	MOVFF       R1, 21
;ModuloCentral.c,38 :: 		if(PIR1.RCIF == 1) { // indica que a interrupção foi disparada pela Serial RX
0x0010	0xAA9E      	BTFSS       PIR1, 5 
0x0012	0xD001      	BRA         L_interrupt3
;ModuloCentral.c,40 :: 		lerProtocolo();
0x0014	0xD932      	RCALL       _lerProtocolo
;ModuloCentral.c,41 :: 		}
L_interrupt3:
;ModuloCentral.c,42 :: 		if(PIR1.TMR1IF == 1){
0x0016	0xA09E      	BTFSS       PIR1, 0 
0x0018	0xD003      	BRA         L_interrupt4
;ModuloCentral.c,43 :: 		PIE1.TMR1IE = 0;
0x001A	0x909D      	BCF         PIE1, 0 
;ModuloCentral.c,44 :: 		PIR1.TMR1IF = 0;
0x001C	0x909E      	BCF         PIR1, 0 
;ModuloCentral.c,45 :: 		executarProtocolo();
0x001E	0xD83A      	RCALL       _executarProtocolo
;ModuloCentral.c,46 :: 		}
L_interrupt4:
;ModuloCentral.c,47 :: 		}
L_end_interrupt:
L__interrupt37:
0x0020	0xF000C016  	MOVFF       22, R0
0x0024	0xF001C015  	MOVFF       21, R1
0x0028	0x0011      	RETFIE      1
; end of _interrupt
_UART1_Write:
;__Lib_UART_c67.c,58 :: 		
;__Lib_UART_c67.c,59 :: 		
L_UART1_Write3:
0x002A	0xB2AC      	BTFSC       TXSTA, 1 
0x002C	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67.c,60 :: 		
0x002E	0x0000      	NOP
0x0030	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,61 :: 		
0x0032	0xFFADC050  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67.c,62 :: 		
L_end_UART1_Write:
0x0036	0x0012      	RETURN      0
; end of _UART1_Write
_UART1_Read:
;__Lib_UART_c67.c,39 :: 		
;__Lib_UART_c67.c,42 :: 		
0x0038	0xF001CFAE  	MOVFF       RCREG, R1
;__Lib_UART_c67.c,43 :: 		
0x003C	0xA2AB      	BTFSS       RCSTA, 1 
0x003E	0xD002      	BRA         L_UART1_Read2
;__Lib_UART_c67.c,44 :: 		
0x0040	0x98AB      	BCF         RCSTA, 4 
;__Lib_UART_c67.c,45 :: 		
0x0042	0x88AB      	BSF         RCSTA, 4 
;__Lib_UART_c67.c,46 :: 		
L_UART1_Read2:
;__Lib_UART_c67.c,47 :: 		
0x0044	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67.c,48 :: 		
L_end_UART1_Read:
0x0048	0x0012      	RETURN      0
; end of _UART1_Read
_UART1_Data_Ready:
;__Lib_UART_c67.c,34 :: 		
;__Lib_UART_c67.c,35 :: 		
0x004A	0x0E00      	MOVLW       0
0x004C	0xBA9E      	BTFSC       PIR1, 5 
0x004E	0x0E01      	MOVLW       1
0x0050	0x6E00      	MOVWF       R0 
;__Lib_UART_c67.c,36 :: 		
L_end_UART1_Data_Ready:
0x0052	0x0012      	RETURN      0
; end of _UART1_Data_Ready
_enviarProtocolo:
;ModuloCentral.c,143 :: 		void enviarProtocolo(char r1, char r2, char r3, char r4, char r5) {
;ModuloCentral.c,166 :: 		UART1_Write(r1);
0x0054	0xF050C04B  	MOVFF       FARG_enviarProtocolo_r1, FARG_UART1_Write_data_
0x0058	0xDFE8      	RCALL       _UART1_Write
;ModuloCentral.c,167 :: 		UART1_Write(r2);
0x005A	0xF050C04C  	MOVFF       FARG_enviarProtocolo_r2, FARG_UART1_Write_data_
0x005E	0xDFE5      	RCALL       _UART1_Write
;ModuloCentral.c,168 :: 		UART1_Write(r3);
0x0060	0xF050C04D  	MOVFF       FARG_enviarProtocolo_r3, FARG_UART1_Write_data_
0x0064	0xDFE2      	RCALL       _UART1_Write
;ModuloCentral.c,169 :: 		UART1_Write(r4);
0x0066	0xF050C04E  	MOVFF       FARG_enviarProtocolo_r4, FARG_UART1_Write_data_
0x006A	0xDFDF      	RCALL       _UART1_Write
;ModuloCentral.c,170 :: 		UART1_Write(r5);
0x006C	0xF050C04F  	MOVFF       FARG_enviarProtocolo_r5, FARG_UART1_Write_data_
0x0070	0xDFDC      	RCALL       _UART1_Write
;ModuloCentral.c,175 :: 		}
L_end_enviarProtocolo:
0x0072	0x0012      	RETURN      0
; end of _enviarProtocolo
_respondeProtocolo:
;ModuloCentral.c,110 :: 		void respondeProtocolo(char r1, char r2, char r3, char r4, char r5) {
;ModuloCentral.c,132 :: 		UART1_Write(r1);
0x0074	0xF050C04B  	MOVFF       FARG_respondeProtocolo_r1, FARG_UART1_Write_data_
0x0078	0xDFD8      	RCALL       _UART1_Write
;ModuloCentral.c,133 :: 		UART1_Write(r2);
0x007A	0xF050C04C  	MOVFF       FARG_respondeProtocolo_r2, FARG_UART1_Write_data_
0x007E	0xDFD5      	RCALL       _UART1_Write
;ModuloCentral.c,134 :: 		UART1_Write(r3);
0x0080	0xF050C04D  	MOVFF       FARG_respondeProtocolo_r3, FARG_UART1_Write_data_
0x0084	0xDFD2      	RCALL       _UART1_Write
;ModuloCentral.c,135 :: 		UART1_Write(r4);
0x0086	0xF050C04E  	MOVFF       FARG_respondeProtocolo_r4, FARG_UART1_Write_data_
0x008A	0xDFCF      	RCALL       _UART1_Write
;ModuloCentral.c,136 :: 		UART1_Write(r5);
0x008C	0xF050C04F  	MOVFF       FARG_respondeProtocolo_r5, FARG_UART1_Write_data_
0x0090	0xDFCC      	RCALL       _UART1_Write
;ModuloCentral.c,141 :: 		}
L_end_respondeProtocolo:
0x0092	0x0012      	RETURN      0
; end of _respondeProtocolo
_executarProtocolo:
;ModuloCentral.c,72 :: 		void executarProtocolo(void) {
;ModuloCentral.c,75 :: 		if(ID[0] == 'M') { //O ID deste módulo é M00
0x0094	0x5021      	MOVF        _ID, 0 
0x0096	0x0A4D      	XORLW       77
0x0098	0xE114      	BNZ         L_executarProtocolo11
;ModuloCentral.c,76 :: 		if(ID[1] == '0') {
0x009A	0x5022      	MOVF        _ID+1, 0 
0x009C	0x0A30      	XORLW       48
0x009E	0xE110      	BNZ         L_executarProtocolo12
;ModuloCentral.c,77 :: 		if(ID[2] == '0') {
0x00A0	0x5023      	MOVF        _ID+2, 0 
0x00A2	0x0A30      	XORLW       48
0x00A4	0xE10D      	BNZ         L_executarProtocolo13
;ModuloCentral.c,78 :: 		respondeProtocolo('+', ID[0], ID[1], ID[2], '+');
0x00A6	0x0E2B      	MOVLW       43
0x00A8	0x6E4B      	MOVWF       FARG_respondeProtocolo_r1 
0x00AA	0xF04CC021  	MOVFF       _ID, FARG_respondeProtocolo_r2
0x00AE	0xF04DC022  	MOVFF       _ID+1, FARG_respondeProtocolo_r3
0x00B2	0xF04EC023  	MOVFF       _ID+2, FARG_respondeProtocolo_r4
0x00B6	0x0E2B      	MOVLW       43
0x00B8	0x6E4F      	MOVWF       FARG_respondeProtocolo_r5 
0x00BA	0xDFDC      	RCALL       _respondeProtocolo
;ModuloCentral.c,79 :: 		ID[0] = '0' ;
0x00BC	0x0E30      	MOVLW       48
0x00BE	0x6E21      	MOVWF       _ID 
;ModuloCentral.c,80 :: 		}
L_executarProtocolo13:
;ModuloCentral.c,81 :: 		}
L_executarProtocolo12:
;ModuloCentral.c,82 :: 		}
0x00C0	0xD05D      	BRA         L_executarProtocolo14
L_executarProtocolo11:
;ModuloCentral.c,85 :: 		else if(ME[0] == '[' && ME[4] == ']') { // Os 5 primeiro bytes são para protocolo de ID
0x00C2	0x5025      	MOVF        _ME, 0 
0x00C4	0x0A5B      	XORLW       91
0x00C6	0xE111      	BNZ         L_executarProtocolo17
0x00C8	0x5029      	MOVF        _ME+4, 0 
0x00CA	0x0A5D      	XORLW       93
0x00CC	0xE10E      	BNZ         L_executarProtocolo17
L__executarProtocolo34:
;ModuloCentral.c,86 :: 		enviarProtocolo(ME[0], ME[1], ME[2], ME[3], ME[4]);
0x00CE	0xF04BC025  	MOVFF       _ME, FARG_enviarProtocolo_r1
0x00D2	0xF04CC026  	MOVFF       _ME+1, FARG_enviarProtocolo_r2
0x00D6	0xF04DC027  	MOVFF       _ME+2, FARG_enviarProtocolo_r3
0x00DA	0xF04EC028  	MOVFF       _ME+3, FARG_enviarProtocolo_r4
0x00DE	0xF04FC029  	MOVFF       _ME+4, FARG_enviarProtocolo_r5
0x00E2	0xDFB8      	RCALL       _enviarProtocolo
;ModuloCentral.c,87 :: 		ME[0] = '0';
0x00E4	0x0E30      	MOVLW       48
0x00E6	0x6E25      	MOVWF       _ME 
;ModuloCentral.c,88 :: 		}
0x00E8	0xD049      	BRA         L_executarProtocolo18
L_executarProtocolo17:
;ModuloCentral.c,90 :: 		else if(ME[1] == RE[0] && ME[2] == RE[1] && ME[3] == RE[2]) {
0x00EA	0x5026      	MOVF        _ME+1, 0 
0x00EC	0x183F      	XORWF       _RE, 0 
0x00EE	0xE11C      	BNZ         L_executarProtocolo21
0x00F0	0x5027      	MOVF        _ME+2, 0 
0x00F2	0x1840      	XORWF       _RE+1, 0 
0x00F4	0xE119      	BNZ         L_executarProtocolo21
0x00F6	0x5028      	MOVF        _ME+3, 0 
0x00F8	0x1841      	XORWF       _RE+2, 0 
0x00FA	0xE116      	BNZ         L_executarProtocolo21
L__executarProtocolo33:
;ModuloCentral.c,92 :: 		if(ME[5] == '(' && ME[9] == ')') { // Os 5 últimos para executar protocolos no ME
0x00FC	0x502A      	MOVF        _ME+5, 0 
0x00FE	0x0A28      	XORLW       40
0x0100	0xE110      	BNZ         L_executarProtocolo24
0x0102	0x502E      	MOVF        _ME+9, 0 
0x0104	0x0A29      	XORLW       41
0x0106	0xE10D      	BNZ         L_executarProtocolo24
L__executarProtocolo32:
;ModuloCentral.c,93 :: 		enviarProtocolo(ME[5], ME[6], ME[7], ME[8], ME[9]);
0x0108	0xF04BC02A  	MOVFF       _ME+5, FARG_enviarProtocolo_r1
0x010C	0xF04CC02B  	MOVFF       _ME+6, FARG_enviarProtocolo_r2
0x0110	0xF04DC02C  	MOVFF       _ME+7, FARG_enviarProtocolo_r3
0x0114	0xF04EC02D  	MOVFF       _ME+8, FARG_enviarProtocolo_r4
0x0118	0xF04FC02E  	MOVFF       _ME+9, FARG_enviarProtocolo_r5
0x011C	0xDF9B      	RCALL       _enviarProtocolo
;ModuloCentral.c,94 :: 		ME[5] = '0';
0x011E	0x0E30      	MOVLW       48
0x0120	0x6E2A      	MOVWF       _ME+5 
;ModuloCentral.c,95 :: 		}
L_executarProtocolo24:
;ModuloCentral.c,96 :: 		RE[0] = '0';
0x0122	0x0E30      	MOVLW       48
0x0124	0x6E3F      	MOVWF       _RE 
;ModuloCentral.c,97 :: 		}
0x0126	0xD02A      	BRA         L_executarProtocolo25
L_executarProtocolo21:
;ModuloCentral.c,99 :: 		else if(RE[0] == 'T' && RE[1] == 'E' && RE[2] == 'P') {
0x0128	0x503F      	MOVF        _RE, 0 
0x012A	0x0A54      	XORLW       84
0x012C	0xE114      	BNZ         L_executarProtocolo28
0x012E	0x5040      	MOVF        _RE+1, 0 
0x0130	0x0A45      	XORLW       69
0x0132	0xE111      	BNZ         L_executarProtocolo28
0x0134	0x5041      	MOVF        _RE+2, 0 
0x0136	0x0A50      	XORLW       80
0x0138	0xE10E      	BNZ         L_executarProtocolo28
L__executarProtocolo31:
;ModuloCentral.c,100 :: 		respondeProtocolo( '+', 'E', 'O', 'K', '+');
0x013A	0x0E2B      	MOVLW       43
0x013C	0x6E4B      	MOVWF       FARG_respondeProtocolo_r1 
0x013E	0x0E45      	MOVLW       69
0x0140	0x6E4C      	MOVWF       FARG_respondeProtocolo_r2 
0x0142	0x0E4F      	MOVLW       79
0x0144	0x6E4D      	MOVWF       FARG_respondeProtocolo_r3 
0x0146	0x0E4B      	MOVLW       75
0x0148	0x6E4E      	MOVWF       FARG_respondeProtocolo_r4 
0x014A	0x0E2B      	MOVLW       43
0x014C	0x6E4F      	MOVWF       FARG_respondeProtocolo_r5 
0x014E	0xDF92      	RCALL       _respondeProtocolo
;ModuloCentral.c,101 :: 		RE[0] = '0';
0x0150	0x0E30      	MOVLW       48
0x0152	0x6E3F      	MOVWF       _RE 
;ModuloCentral.c,102 :: 		}
0x0154	0xD013      	BRA         L_executarProtocolo29
L_executarProtocolo28:
;ModuloCentral.c,104 :: 		else if(flag == 1){
0x0156	0x0E00      	MOVLW       0
0x0158	0x183E      	XORWF       _flag+1, 0 
0x015A	0xE102      	BNZ         L__executarProtocolo40
0x015C	0x0E01      	MOVLW       1
0x015E	0x183D      	XORWF       _flag, 0 
L__executarProtocolo40:
0x0160	0xE10D      	BNZ         L_executarProtocolo30
;ModuloCentral.c,105 :: 		respondeProtocolo('+', 'E', 'N', 'O', '+');
0x0162	0x0E2B      	MOVLW       43
0x0164	0x6E4B      	MOVWF       FARG_respondeProtocolo_r1 
0x0166	0x0E45      	MOVLW       69
0x0168	0x6E4C      	MOVWF       FARG_respondeProtocolo_r2 
0x016A	0x0E4E      	MOVLW       78
0x016C	0x6E4D      	MOVWF       FARG_respondeProtocolo_r3 
0x016E	0x0E4F      	MOVLW       79
0x0170	0x6E4E      	MOVWF       FARG_respondeProtocolo_r4 
0x0172	0x0E2B      	MOVLW       43
0x0174	0x6E4F      	MOVWF       FARG_respondeProtocolo_r5 
0x0176	0xDF7E      	RCALL       _respondeProtocolo
;ModuloCentral.c,106 :: 		flag =0;
0x0178	0x6A3D      	CLRF        _flag 
0x017A	0x6A3E      	CLRF        _flag+1 
;ModuloCentral.c,107 :: 		}
L_executarProtocolo30:
L_executarProtocolo29:
L_executarProtocolo25:
L_executarProtocolo18:
L_executarProtocolo14:
;ModuloCentral.c,108 :: 		}
L_end_executarProtocolo:
0x017C	0x0012      	RETURN      0
; end of _executarProtocolo
_UART1_Read_Text:
;__Lib_UART_c67.c,78 :: 		
;__Lib_UART_c67.c,79 :: 		
0x017E	0x6A49      	CLRF        UART1_Read_Text_out_idx_L0 
0x0180	0x6A4A      	CLRF        UART1_Read_Text_delim_idx_L0 
;__Lib_UART_c67.c,81 :: 		
L_UART1_Read_Text7:
0x0182	0x5247      	MOVF        FARG_UART1_Read_Text_Attempts, 1 
0x0184	0xE041      	BZ          L_UART1_Read_Text8
;__Lib_UART_c67.c,83 :: 		
0x0186	0x5047      	MOVF        FARG_UART1_Read_Text_Attempts, 0 
0x0188	0x0AFF      	XORLW       255
0x018A	0xA4D8      	BTFSS       STATUS, 2 
;__Lib_UART_c67.c,84 :: 		
0x018C	0x0647      	DECF        FARG_UART1_Read_Text_Attempts, 1 
L_UART1_Read_Text9:
;__Lib_UART_c67.c,86 :: 		
L_UART1_Read_Text10:
0x018E	0xDF5D      	RCALL       _UART1_Data_Ready
0x0190	0x5000      	MOVF        R0, 0 
0x0192	0x0A00      	XORLW       0
0x0194	0xE101      	BNZ         L_UART1_Read_Text11
;__Lib_UART_c67.c,87 :: 		
0x0196	0xD7FB      	BRA         L_UART1_Read_Text10
L_UART1_Read_Text11:
;__Lib_UART_c67.c,89 :: 		
0x0198	0xDF4F      	RCALL       _UART1_Read
0x019A	0xF048C000  	MOVFF       R0, UART1_Read_Text_r_data_L0
;__Lib_UART_c67.c,90 :: 		
0x019E	0x5049      	MOVF        UART1_Read_Text_out_idx_L0, 0 
0x01A0	0x2443      	ADDWF       FARG_UART1_Read_Text_Output, 0 
0x01A2	0x6EE1      	MOVWF       FSR1 
0x01A4	0x0E00      	MOVLW       0
0x01A6	0x2044      	ADDWFC      FARG_UART1_Read_Text_Output+1, 0 
0x01A8	0x6EE2      	MOVWF       FSR1H 
0x01AA	0xFFE6C000  	MOVFF       R0, POSTINC1
0x01AE	0x2A49      	INCF        UART1_Read_Text_out_idx_L0, 1 
;__Lib_UART_c67.c,91 :: 		
0x01B0	0x504A      	MOVF        UART1_Read_Text_delim_idx_L0, 0 
0x01B2	0x2445      	ADDWF       FARG_UART1_Read_Text_Delimiter, 0 
0x01B4	0x6EE9      	MOVWF       FSR0 
0x01B6	0x0E00      	MOVLW       0
0x01B8	0x2046      	ADDWFC      FARG_UART1_Read_Text_Delimiter+1, 0 
0x01BA	0x6EEA      	MOVWF       FSR0H 
0x01BC	0x50EE      	MOVF        POSTINC0, 0 
0x01BE	0x1848      	XORWF       UART1_Read_Text_r_data_L0, 0 
0x01C0	0xE102      	BNZ         L_UART1_Read_Text12
;__Lib_UART_c67.c,92 :: 		
0x01C2	0x2A4A      	INCF        UART1_Read_Text_delim_idx_L0, 1 
;__Lib_UART_c67.c,93 :: 		
0x01C4	0xD009      	BRA         L_UART1_Read_Text13
L_UART1_Read_Text12:
;__Lib_UART_c67.c,95 :: 		
0x01C6	0x6A4A      	CLRF        UART1_Read_Text_delim_idx_L0 
;__Lib_UART_c67.c,96 :: 		
0x01C8	0xFFE9C045  	MOVFF       FARG_UART1_Read_Text_Delimiter, FSR0
0x01CC	0xFFEAC046  	MOVFF       FARG_UART1_Read_Text_Delimiter+1, FSR0H
0x01D0	0x50EE      	MOVF        POSTINC0, 0 
0x01D2	0x1848      	XORWF       UART1_Read_Text_r_data_L0, 0 
0x01D4	0xB4D8      	BTFSC       STATUS, 2 
;__Lib_UART_c67.c,97 :: 		
0x01D6	0x2A4A      	INCF        UART1_Read_Text_delim_idx_L0, 1 
;__Lib_UART_c67.c,98 :: 		
L_UART1_Read_Text14:
;__Lib_UART_c67.c,99 :: 		
L_UART1_Read_Text13:
;__Lib_UART_c67.c,101 :: 		
0x01D8	0x504A      	MOVF        UART1_Read_Text_delim_idx_L0, 0 
0x01DA	0x2445      	ADDWF       FARG_UART1_Read_Text_Delimiter, 0 
0x01DC	0x6EE9      	MOVWF       FSR0 
0x01DE	0x0E00      	MOVLW       0
0x01E0	0x2046      	ADDWFC      FARG_UART1_Read_Text_Delimiter+1, 0 
0x01E2	0x6EEA      	MOVWF       FSR0H 
0x01E4	0x50EE      	MOVF        POSTINC0, 0 
0x01E6	0x0A00      	XORLW       0
0x01E8	0xE10E      	BNZ         L_UART1_Read_Text15
;__Lib_UART_c67.c,102 :: 		
0x01EA	0x504A      	MOVF        UART1_Read_Text_delim_idx_L0, 0 
0x01EC	0x5C49      	SUBWF       UART1_Read_Text_out_idx_L0, 0 
0x01EE	0x6E00      	MOVWF       R0 
0x01F0	0x6A01      	CLRF        R1 
0x01F2	0x0E00      	MOVLW       0
0x01F4	0x5A01      	SUBWFB      R1, 1 
0x01F6	0x5000      	MOVF        R0, 0 
0x01F8	0x2443      	ADDWF       FARG_UART1_Read_Text_Output, 0 
0x01FA	0x6EE1      	MOVWF       FSR1 
0x01FC	0x5001      	MOVF        R1, 0 
0x01FE	0x2044      	ADDWFC      FARG_UART1_Read_Text_Output+1, 0 
0x0200	0x6EE2      	MOVWF       FSR1H 
0x0202	0x6AE6      	CLRF        POSTINC1 
;__Lib_UART_c67.c,103 :: 		
0x0204	0xD006      	BRA         L_end_UART1_Read_Text
;__Lib_UART_c67.c,104 :: 		
L_UART1_Read_Text15:
;__Lib_UART_c67.c,106 :: 		
0x0206	0xD7BD      	BRA         L_UART1_Read_Text7
L_UART1_Read_Text8:
;__Lib_UART_c67.c,107 :: 		
0x0208	0xFFE1C043  	MOVFF       FARG_UART1_Read_Text_Output, FSR1
0x020C	0xFFE2C044  	MOVFF       FARG_UART1_Read_Text_Output+1, FSR1H
0x0210	0x6AE6      	CLRF        POSTINC1 
;__Lib_UART_c67.c,108 :: 		
L_end_UART1_Read_Text:
0x0212	0x0012      	RETURN      0
; end of _UART1_Read_Text
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0214	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0216	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x021A	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x021C	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x021E	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0220	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0222	0x0012      	RETURN      0
; end of ___CC2DW
_UART1_Init:
;__Lib_UART_c67.c,15 :: 		
;__Lib_UART_c67.c,18 :: 		
0x0224	0x0E2A      	MOVLW       _UART1_Write
0x0226	0x6E30      	MOVWF       _UART_Wr_Ptr 
0x0228	0x0E00      	MOVLW       hi_addr(_UART1_Write)
0x022A	0x6E31      	MOVWF       _UART_Wr_Ptr+1 
0x022C	0x0E50      	MOVLW       FARG_UART1_Write_data_
0x022E	0x6E32      	MOVWF       _UART_Wr_Ptr+2 
0x0230	0x0E00      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x0232	0x6E33      	MOVWF       _UART_Wr_Ptr+3 
;__Lib_UART_c67.c,19 :: 		
0x0234	0x0E38      	MOVLW       _UART1_Read
0x0236	0x6E34      	MOVWF       _UART_Rd_Ptr 
0x0238	0x0E00      	MOVLW       hi_addr(_UART1_Read)
0x023A	0x6E35      	MOVWF       _UART_Rd_Ptr+1 
0x023C	0x0E00      	MOVLW       0
0x023E	0x6E36      	MOVWF       _UART_Rd_Ptr+2 
0x0240	0x0E00      	MOVLW       0
0x0242	0x6E37      	MOVWF       _UART_Rd_Ptr+3 
;__Lib_UART_c67.c,20 :: 		
0x0244	0x0E4A      	MOVLW       _UART1_Data_Ready
0x0246	0x6E38      	MOVWF       _UART_Rdy_Ptr 
0x0248	0x0E00      	MOVLW       hi_addr(_UART1_Data_Ready)
0x024A	0x6E39      	MOVWF       _UART_Rdy_Ptr+1 
0x024C	0x0E00      	MOVLW       0
0x024E	0x6E3A      	MOVWF       _UART_Rdy_Ptr+2 
0x0250	0x0E00      	MOVLW       0
0x0252	0x6E3B      	MOVWF       _UART_Rdy_Ptr+3 
;__Lib_UART_c67.c,21 :: 		
0x0254	0x0EFF      	MOVLW       _UART1_Tx_Idle
0x0256	0x6E1D      	MOVWF       _UART_Tx_Idle_Ptr 
0x0258	0x0EFF      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x025A	0x6E1E      	MOVWF       _UART_Tx_Idle_Ptr+1 
0x025C	0x0E00      	MOVLW       0
0x025E	0x6E1F      	MOVWF       _UART_Tx_Idle_Ptr+2 
0x0260	0x0E00      	MOVLW       0
0x0262	0x6E20      	MOVWF       _UART_Tx_Idle_Ptr+3 
;__Lib_UART_c67.c,23 :: 		
0x0264	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67.c,24 :: 		
0x0266	0x0E90      	MOVLW       144
0x0268	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67.c,25 :: 		
0x026A	0x8E94      	BSF         TRISC7_bit, 7 
;__Lib_UART_c67.c,26 :: 		
0x026C	0x9C94      	BCF         TRISC6_bit, 6 
;__Lib_UART_c67.c,28 :: 		
L_UART1_Init0:
0x026E	0xAA9E      	BTFSS       PIR1, 5 
0x0270	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67.c,29 :: 		
0x0272	0xF000CFAE  	MOVFF       RCREG, R0
0x0276	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,30 :: 		
L_end_UART1_Init:
0x0278	0x0012      	RETURN      0
; end of _UART1_Init
_lerProtocolo:
;ModuloCentral.c,49 :: 		void lerProtocolo(void) { //função que lê o protocolo e chama sua execução
;ModuloCentral.c,51 :: 		if(UART1_Data_Ready()) {
0x027A	0xDEE7      	RCALL       _UART1_Data_Ready
0x027C	0x5200      	MOVF        R0, 1 
0x027E	0xE032      	BZ          L_lerProtocolo5
;ModuloCentral.c,53 :: 		lido = UART1_Read(); // lê o byte de inicio do protocolo
0x0280	0xDEDB      	RCALL       _UART1_Read
0x0282	0xF03CC000  	MOVFF       R0, _lido
;ModuloCentral.c,55 :: 		if(lido == '[') { // se for '[' indica que o protocolo eh de identificação do módulo
0x0286	0x5000      	MOVF        R0, 0 
0x0288	0x0A5B      	XORLW       91
0x028A	0xE10D      	BNZ         L_lerProtocolo6
;ModuloCentral.c,56 :: 		UART1_Read_Text(ID, "]", 4);
0x028C	0x0E21      	MOVLW       _ID
0x028E	0x6E43      	MOVWF       FARG_UART1_Read_Text_Output 
0x0290	0x0E00      	MOVLW       hi_addr(_ID)
0x0292	0x6E44      	MOVWF       FARG_UART1_Read_Text_Output+1 
0x0294	0x0E17      	MOVLW       ?lstr1_ModuloCentral
0x0296	0x6E45      	MOVWF       FARG_UART1_Read_Text_Delimiter 
0x0298	0x0E00      	MOVLW       hi_addr(?lstr1_ModuloCentral)
0x029A	0x6E46      	MOVWF       FARG_UART1_Read_Text_Delimiter+1 
0x029C	0x0E04      	MOVLW       4
0x029E	0x6E47      	MOVWF       FARG_UART1_Read_Text_Attempts 
0x02A0	0xDF6E      	RCALL       _UART1_Read_Text
;ModuloCentral.c,57 :: 		executarProtocolo();
0x02A2	0xDEF8      	RCALL       _executarProtocolo
;ModuloCentral.c,58 :: 		}
0x02A4	0xD01F      	BRA         L_lerProtocolo7
L_lerProtocolo6:
;ModuloCentral.c,60 :: 		else if(lido == '{') { // se for '{' indica que o protocolo eh de envio ao ME
0x02A6	0x503C      	MOVF        _lido, 0 
0x02A8	0x0A7B      	XORLW       123
0x02AA	0xE10D      	BNZ         L_lerProtocolo8
;ModuloCentral.c,61 :: 		UART1_Read_Text(ME, "}", 11);
0x02AC	0x0E25      	MOVLW       _ME
0x02AE	0x6E43      	MOVWF       FARG_UART1_Read_Text_Output 
0x02B0	0x0E00      	MOVLW       hi_addr(_ME)
0x02B2	0x6E44      	MOVWF       FARG_UART1_Read_Text_Output+1 
0x02B4	0x0E1B      	MOVLW       ?lstr2_ModuloCentral
0x02B6	0x6E45      	MOVWF       FARG_UART1_Read_Text_Delimiter 
0x02B8	0x0E00      	MOVLW       hi_addr(?lstr2_ModuloCentral)
0x02BA	0x6E46      	MOVWF       FARG_UART1_Read_Text_Delimiter+1 
0x02BC	0x0E0B      	MOVLW       11
0x02BE	0x6E47      	MOVWF       FARG_UART1_Read_Text_Attempts 
0x02C0	0xDF5E      	RCALL       _UART1_Read_Text
;ModuloCentral.c,62 :: 		executarProtocolo();
0x02C2	0xDEE8      	RCALL       _executarProtocolo
;ModuloCentral.c,63 :: 		}
0x02C4	0xD00F      	BRA         L_lerProtocolo9
L_lerProtocolo8:
;ModuloCentral.c,65 :: 		else if(lido == '+') { // ser for '+' indica que o protocolo eh de resposta
0x02C6	0x503C      	MOVF        _lido, 0 
0x02C8	0x0A2B      	XORLW       43
0x02CA	0xE10C      	BNZ         L_lerProtocolo10
;ModuloCentral.c,66 :: 		UART1_Read_Text(RE, "+", 4);
0x02CC	0x0E3F      	MOVLW       _RE
0x02CE	0x6E43      	MOVWF       FARG_UART1_Read_Text_Output 
0x02D0	0x0E00      	MOVLW       hi_addr(_RE)
0x02D2	0x6E44      	MOVWF       FARG_UART1_Read_Text_Output+1 
0x02D4	0x0E19      	MOVLW       ?lstr3_ModuloCentral
0x02D6	0x6E45      	MOVWF       FARG_UART1_Read_Text_Delimiter 
0x02D8	0x0E00      	MOVLW       hi_addr(?lstr3_ModuloCentral)
0x02DA	0x6E46      	MOVWF       FARG_UART1_Read_Text_Delimiter+1 
0x02DC	0x0E04      	MOVLW       4
0x02DE	0x6E47      	MOVWF       FARG_UART1_Read_Text_Attempts 
0x02E0	0xDF4E      	RCALL       _UART1_Read_Text
;ModuloCentral.c,67 :: 		executarProtocolo();
0x02E2	0xDED8      	RCALL       _executarProtocolo
;ModuloCentral.c,68 :: 		}
L_lerProtocolo10:
L_lerProtocolo9:
L_lerProtocolo7:
;ModuloCentral.c,69 :: 		}
L_lerProtocolo5:
;ModuloCentral.c,70 :: 		}
L_end_lerProtocolo:
0x02E4	0x0012      	RETURN      0
; end of _lerProtocolo
_main:
0x02E6	0x0E5D      	MOVLW       93
0x02E8	0x6E17      	MOVWF       ?lstr1_ModuloCentral 
0x02EA	0x6A18      	CLRF        24 
0x02EC	0x0E2B      	MOVLW       43
0x02EE	0x6E19      	MOVWF       ?lstr3_ModuloCentral 
0x02F0	0x6A1A      	CLRF        26 
0x02F2	0x0E7D      	MOVLW       125
0x02F4	0x6E1B      	MOVWF       ?lstr2_ModuloCentral 
0x02F6	0x6A1C      	CLRF        28 
;ModuloCentral.c,19 :: 		void main() {
;ModuloCentral.c,20 :: 		UART1_init(9600);
0x02F8	0x0E19      	MOVLW       25
0x02FA	0x6EAF      	MOVWF       SPBRG 
0x02FC	0x84AC      	BSF         TXSTA, 2, 0
0x02FE	0xDF92      	RCALL       _UART1_Init
;ModuloCentral.c,21 :: 		Delay_ms(100);
0x0300	0x0E82      	MOVLW       130
0x0302	0x6E0C      	MOVWF       R12, 0
0x0304	0x0EDD      	MOVLW       221
0x0306	0x6E0D      	MOVWF       R13, 0
L_main0:
0x0308	0x2E0D      	DECFSZ      R13, 1, 0
0x030A	0xD7FE      	BRA         L_main0
0x030C	0x2E0C      	DECFSZ      R12, 1, 0
0x030E	0xD7FC      	BRA         L_main0
0x0310	0x0000      	NOP
0x0312	0x0000      	NOP
;ModuloCentral.c,24 :: 		RCON.IPEN = 1;
0x0314	0x8ED0      	BSF         RCON, 7 
;ModuloCentral.c,25 :: 		INTCON.GIEH = 1;
0x0316	0x8EF2      	BSF         INTCON, 7 
;ModuloCentral.c,26 :: 		INTCON.GIEL = 1;
0x0318	0x8CF2      	BSF         INTCON, 6 
;ModuloCentral.c,29 :: 		IPR1.RCIP = 1; //alta prioridade
0x031A	0x8A9F      	BSF         IPR1, 5 
;ModuloCentral.c,30 :: 		PIR1.RCIF = 0; //flag de sinalização
0x031C	0x9A9E      	BCF         PIR1, 5 
;ModuloCentral.c,31 :: 		PIE1.RCIE = 1; //Enable da interrupção Serial RX
0x031E	0x8A9D      	BSF         PIE1, 5 
;ModuloCentral.c,33 :: 		while(1) {
L_main1:
;ModuloCentral.c,34 :: 		}
0x0320	0xD7FF      	BRA         L_main1
;ModuloCentral.c,35 :: 		}
L_end_main:
0x0322	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [34]    _interrupt
0x002A      [14]    _UART1_Write
0x0038      [18]    _UART1_Read
0x004A      [10]    _UART1_Data_Ready
0x0054      [32]    _enviarProtocolo
0x0074      [32]    _respondeProtocolo
0x0094     [234]    _executarProtocolo
0x017E     [150]    _UART1_Read_Text
0x0214      [16]    ___CC2DW
0x0224      [86]    _UART1_Init
0x027A     [108]    _lerProtocolo
0x02E6      [62]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    R0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [1]    R1
0x0001       [1]    FLASH_Write_32_i_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    __Lib_TFT_JPEG_FileRead_i_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    __Lib_TFT_JPEG_FileReadBytes_Result_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [1]    FLASH_Write_32_SaveINTCON_L0
0x0002       [2]    memchr_s_L0
0x0002       [2]    strlen_cp_L0
0x0002       [2]    memset_pp_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [1]    R2
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [1]    MM_Init_i_L0
0x0003       [1]    R3
0x0003       [2]    Ltrim_original_L0
0x0003       [2]    memmove_tt_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    frexp_pom_L0
0x0004       [1]    R4
0x0005       [2]    Ltrim_p_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [1]    R5
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    memmove_ff_L0
0x0006       [1]    R6
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0007       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    R7
0x0008       [1]    R8
0x0008       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bTable_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0017       [2]    ?lstr1_ModuloCentral
0x0019       [2]    ?lstr3_ModuloCentral
0x001B       [2]    ?lstr2_ModuloCentral
0x001D       [4]    _UART_Tx_Idle_Ptr
0x0021       [4]    _ID
0x0025      [11]    _ME
0x0030       [4]    _UART_Wr_Ptr
0x0034       [4]    _UART_Rd_Ptr
0x0038       [4]    _UART_Rdy_Ptr
0x003C       [1]    _lido
0x003D       [2]    _flag
0x003F       [4]    _RE
0x0043       [2]    FARG_UART1_Read_Text_Output
0x0045       [2]    FARG_UART1_Read_Text_Delimiter
0x0047       [1]    FARG_UART1_Read_Text_Attempts
0x0048       [1]    UART1_Read_Text_r_data_L0
0x0049       [1]    UART1_Read_Text_out_idx_L0
0x004A       [1]    UART1_Read_Text_delim_idx_L0
0x004B       [1]    FARG_enviarProtocolo_r1
0x004B       [1]    FARG_respondeProtocolo_r1
0x004C       [1]    FARG_respondeProtocolo_r2
0x004C       [1]    FARG_enviarProtocolo_r2
0x004D       [1]    FARG_respondeProtocolo_r3
0x004D       [1]    FARG_enviarProtocolo_r3
0x004E       [1]    FARG_respondeProtocolo_r4
0x004E       [1]    FARG_enviarProtocolo_r4
0x004F       [1]    FARG_enviarProtocolo_r5
0x004F       [1]    FARG_respondeProtocolo_r5
0x0050       [1]    FARG_UART1_Write_data_
0x0F80       [1]    PORTA
0x0F81       [1]    PORTB
0x0F82       [1]    PORTC
0x0F83       [1]    PORTD
0x0F84       [1]    PORTE
0x0F89       [1]    LATA
0x0F8A       [1]    LATB
0x0F8B       [1]    LATC
0x0F8C       [1]    LATD
0x0F8D       [1]    LATE
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F94       [0]    TRISC6_bit
0x0F94       [1]    TRISC
0x0F94       [0]    TRISC7_bit
0x0F95       [1]    TRISD
0x0F96       [1]    TRISE
0x0F9B       [1]    OSCTUNE
0x0F9D       [1]    PIE1
0x0F9E       [1]    PIR1
0x0F9F       [1]    IPR1
0x0FA0       [1]    PIE2
0x0FA1       [1]    PIR2
0x0FA2       [1]    IPR2
0x0FA6       [1]    EECON1
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB1       [1]    T3CON
0x0FB4       [1]    CMCON
0x0FB5       [1]    CVRCON
0x0FB6       [1]    ECCP1AS
0x0FB7       [1]    ECCP1DEL
0x0FB8       [1]    BAUDCON
0x0FBA       [1]    CCP2CON
0x0FBD       [1]    CCP1CON
0x0FC0       [1]    ADCON2
0x0FC1       [1]    ADCON1
0x0FC2       [1]    ADCON0
0x0FC5       [1]    SSPCON2
0x0FC6       [1]    SSPCON1
0x0FC7       [1]    SSPSTAT
0x0FCA       [1]    T2CON
0x0FCD       [1]    T1CON
0x0FD0       [1]    RCON
0x0FD1       [1]    WDTCON
0x0FD2       [1]    HLVDCON
0x0FD3       [1]    OSCCON
0x0FD5       [1]    T0CON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF0       [1]    INTCON3
0x0FF1       [1]    INTCON2
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
0x0FFB       [1]    PCLATU
0x0FFC       [1]    STKPTR
//** Label List: ** 
//----------------------------------------------
  L_main0
  L_main1
  L_main2
  L_interrupt3
  L_interrupt4
  L_lerProtocolo5
  L_lerProtocolo6
  L_lerProtocolo7
  L_lerProtocolo8
  L_lerProtocolo9
  L_lerProtocolo10
  L_executarProtocolo11
  L_executarProtocolo12
  L_executarProtocolo13
  L_executarProtocolo14
  L_executarProtocolo15
  L_executarProtocolo16
  L_executarProtocolo17
  L_executarProtocolo18
  L_executarProtocolo19
  L_executarProtocolo20
  L_executarProtocolo21
  L_executarProtocolo22
  L_executarProtocolo23
  L_executarProtocolo24
  L_executarProtocolo25
  L_executarProtocolo26
  L_executarProtocolo27
  L_executarProtocolo28
  L_executarProtocolo29
  L_executarProtocolo30
  L__executarProtocolo31
  L__executarProtocolo32
  L__executarProtocolo33
  L__executarProtocolo34
  L_end_main
  _main
  L_end_interrupt
  _interrupt
  L__interrupt37
  L_end_lerProtocolo
  _lerProtocolo
  L_end_executarProtocolo
  _executarProtocolo
  L__executarProtocolo40
  L_end_respondeProtocolo
  _respondeProtocolo
  L_end_enviarProtocolo
  _enviarProtocolo
  L_end_P18F4520___?ag
  P18F4520____?ag
  _CC2D_Loop1
  _CC2DL_Loop1
  L_longjmp2
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end_____DoIFC
  _____DoIFC
  L_end_Swap
  _Swap
  L_end_setjmp
  _setjmp
  L_end_longjmp
  _longjmp
  L_UART1_Init0
  L_UART1_Init1
  L_UART1_Read2
  L_UART1_Write3
  L_UART1_Write4
  L_UART1_Write_Text5
  L_UART1_Write_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Read_Text13
  L_UART1_Read_Text14
  L_UART1_Read_Text15
  L_UART_Write_Text16
  L_UART_Write_Text17
  L_UART_Read_Text18
  L_UART_Read_Text19
  L_UART_Read_Text20
  L_UART_Read_Text21
  L_UART_Read_Text22
  L_UART_Read_Text23
  L_UART_Read_Text24
  L_UART_Read_Text25
  L_UART_Read_Text26
  L_end_UART1_Init
  _UART1_Init
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_main0
  L_main1
  L_main2
  L_interrupt3
  L_interrupt4
  L_lerProtocolo5
  L_lerProtocolo6
  L_lerProtocolo7
  L_lerProtocolo8
  L_lerProtocolo9
  L_lerProtocolo10
  L_executarProtocolo11
  L_executarProtocolo12
  L_executarProtocolo13
  L_executarProtocolo14
  L_executarProtocolo15
  L_executarProtocolo16
  L_executarProtocolo17
  L_executarProtocolo18
  L_executarProtocolo19
  L_executarProtocolo20
  L_executarProtocolo21
  L_executarProtocolo22
  L_executarProtocolo23
  L_executarProtocolo24
  L_executarProtocolo25
  L_executarProtocolo26
  L_executarProtocolo27
  L_executarProtocolo28
  L_executarProtocolo29
  L_executarProtocolo30
  L__executarProtocolo31
  L__executarProtocolo32
  L__executarProtocolo33
  L__executarProtocolo34
  L_end_main
  _main
  L_end_interrupt
  _interrupt
  L__interrupt37
  L_end_lerProtocolo
  _lerProtocolo
  L_end_executarProtocolo
  _executarProtocolo
  L__executarProtocolo40
  L_end_respondeProtocolo
  _respondeProtocolo
  L_end_enviarProtocolo
  _enviarProtocolo
  L_UART1_Init0
  L_UART1_Init1
  L_UART1_Read2
  L_UART1_Write3
  L_UART1_Write4
  L_UART1_Write_Text5
  L_UART1_Write_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Read_Text13
  L_UART1_Read_Text14
  L_UART1_Read_Text15
  L_UART_Write_Text16
  L_UART_Write_Text17
  L_UART_Read_Text18
  L_UART_Read_Text19
  L_UART_Read_Text20
  L_UART_Read_Text21
  L_UART_Read_Text22
  L_UART_Read_Text23
  L_UART_Read_Text24
  L_UART_Read_Text25
  L_UART_Read_Text26
  L_end_UART1_Init
  _UART1_Init
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
